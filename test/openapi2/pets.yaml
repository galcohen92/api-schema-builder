swagger: "2.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
host: petstore.swagger.io
basePath: /
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /pet:
    post:
      summary: Create a pet
      operationId: createPets
      parameters:
      - $ref: '#/parameters/ApiRequestId'
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/Pet'
      responses:
        "201":
          description: Null response
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /dog:
    post:
      summary: Create a dog
      operationId: createDog
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/Dog'
      responses:
        "201":
          description: Null response
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /tree:
    post:
      summary: Create a tree
      operationId: createTree
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/Tree'
      responses:
        "201":
          description: Null response
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pet-query:
    get:
      summary: get pet
      operationId: petByQuery
      tags:
      - pets
      parameters:
      - $ref: '#/parameters/ApiRequestId'
      - $ref: '#/parameters/PetType'
      - name: limit
        in: query
        description: How many items to return at one time (max 100)
        required: true
        type: integer
        # format: int32
        minimum: 1
        maximum: 100
      responses:
        "200":
          description: An paged array of pets
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:
            $ref: '#/definitions/Pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pet-header:
    get:
      summary: List all pets
      operationId: petByHeader
      tags:
      - pets
      parameters:
      - $ref: '#/parameters/ApiRequestId'
      - $ref: '#/parameters/PetType'
      - $ref: '#/parameters/ApiVersion'
      - name: limit
        in: query
        description: How many items to return at one time (max 100)
        required: false
        type: integer
        # format: int32
        minimum: 1
        maximum: 100
      responses:
        "200":
          description: An paged array of pets
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:
            $ref: '#/definitions/Pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pet-path/{name}:
    get:
      summary: List all pets
      operationId: petByPath
      tags:
      - pets
      parameters:
      - $ref: '#/parameters/ApiRequestId'
      - $ref: '#/parameters/PetType'
      - $ref: '#/parameters/Name'
      responses:
        "200":
          description: An paged array of pets
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:
            $ref: '#/definitions/Pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /{version}/pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
      - pets
      parameters:
      - $ref: '#/parameters/version'
      - $ref: '#/parameters/ApiRequestId'
      - name: petId
        in: path
        required: true
        description: The id of the pet to retrieve
        type: string
        minLength: 3
        maxLength: 10
      responses:
        "200":
          description: Expected response to a valid request
          schema:
            $ref: '#/definitions/Pets'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Pet:
    type: object
    discriminator: petType
    properties:
      name:
        type: string
      petType:
        type: string
    required:
    - name
    - petType
  Tree:
    type: object
    properties:
      name:
        type: string
    required:
    - name
  Cat:
    description: A representation of a cat
    allOf:
    - $ref: '#/definitions/Pet'
    - type: object
      properties:
        huntingSkill:
          type: string
          description: The measured skill for hunting
          default: lazy
          enum:
          - clueless
          - lazy
          - adventurous
          - aggressive
      required:
      - huntingSkill
  Dog:
    description: A representation of a dog
    allOf:
    - $ref: '#/definitions/Pet'
    - type: object
      properties:
        packSize:
          type: integer
          format: int32
          description: the size of the pack the dog is from
          default: 0
          minimum: 0
      required:
      - packSize
  Pets:
    type: array
    items:
      $ref: '#/definitions/Pet'
  Error:
    type: object
    required:
    - code
    - message
    properties:
      code:
        type: integer
        # format: int32
      message:
        type: string
parameters:
  ApiVersion:
    name: 'api-version'
    in: header
    description: 'The api version. It overwrites the account settings.'
    required: true
    type: string
    enum: ['1.0', '1.1']
  ApiRequestId:
    name: 'request-id'
    in: header
    description: 'global request id through the system.'
    type: string
    minLength: 1
    x-example: '123456'
  PetType:
    name: 'PetType'
    in: query
    description: 'filter by pet type'
    type: string
    enum: ['Dog', 'Cat']
  Name:
    name: 'name'
    in: path
    description: 'pet name'
    type: string
    enum: ['kitty']
    required: true
  version:
    name: 'version'
    in: path
    description: 'api version in path'
    type: string
    enum: ['v1']
    required: true
